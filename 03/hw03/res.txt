./alloca1.ll:  store i64 17, i64* %1
./alloca2.ll:  store i64 17, i64* %1
./alloca2.ll:  store i64* %1, i64** %2
./analysis10.ll:  store i64 %3, i64* %4
./analysis10.ll:  store i64 %6, i64* %7
./analysis10.ll:  store i64 %11, i64* %7
./analysis10.ll:  store i64 %13, i64* %7
./analysis11.ll:  store i64 1, i64* %4
./analysis11.ll:  store i64 2, i64* %5
./analysis11_cf_opt.ll:  store i64 1, i64* %4
./analysis11_cf_opt.ll:  store i64 2, i64* %5
./analysis16.ll:  store i64 6, i64* %1
./analysis16.ll:  store i64 7, i64* %2
./analysis16.ll:  store i64 %9, i64* %1
./analysis16.ll:  store i64 %10, i64* %2
./analysis18.ll:  store i64 %2, i64* %sa
./analysis18.ll:  store i64 %3, i64* %sb
./analysis18.ll:  store i64 %4, i64* %sb
./analysis18.ll:  store i64 %res, i64* %1
./analysis18_cf_opt.ll:  store i64 14, i64* %sa
./analysis18_cf_opt.ll:  store i64 42, i64* %sb
./analysis18_cf_opt.ll:  store i64 40, i64* %sb
./analysis18_cf_opt.ll:  store i64 %res, i64* %1
./analysis18_dce_opt.ll:  store i64 14, i64* %sa
./analysis18_dce_opt.ll:  store i64 42, i64* %sb
./analysis4.ll:  store i64 %1, i64* %3
./analysis4.ll:  store i64 %8, i64* %3
./analysis4_cf_opt.ll:  store i64 49, i64* %3
./analysis4_cf_opt.ll:  store i64 %8, i64* %3
./analysis7.ll:  store i64 %1, i64* %2
./analysis7.ll:  store i64 %3, i64* %4
./analysis7.ll:  store i64 %8, i64* %4
./analysis8.ll:  store i64 %m, i64* %tmp1
./analysis8_cf_opt.ll:  store i64 91, i64* %tmp1
./analysis8_dce_opt.ll:  store i64 91, i64* %tmp1
./analysis9.ll:  store i64 5, i64* %1
./analysis9.ll:  store i64 1, i64* %2
./analysis9.ll:  store i64 %7, i64* %1
./analysis9.ll:  store i64 %9, i64* %2
./bitcast1.ll:  store i64 3, i64* %1
./callback1.ll:  store i64 %2, i64* %1
./cbr.ll:  store i64 0, i64* %1
./cbr.ll:  store i64 100, i64* %y
./cbr.ll:  store i64 %4, i64* %1
./cbr.ll:  store i64 %5, i64* %1
./certified_random_number_generator.ll:  store i64 %start, i64* %p_lfsr
./certified_random_number_generator.ll:  store i64 %inc, i64* %p_lfsr
./certified_random_number_generator.ll:  store i64 %lfsr3, i64* %p_lfsr
./certified_random_number_generator_soln.ll:  store i64 8, i64* %p_lfsr
./certified_random_number_generator_soln.ll:  store i64 %inc, i64* %p_lfsr
./certified_random_number_generator_soln.ll:  store i64 4, i64* %p_lfsr
./euclid.ll:  store i64 %a, i64* %1
./euclid.ll:  store i64 %3, i64* %1
./factorial.ll:  store i64 %n, i64* %1
./factorial.ll:  store i64 1, i64* %acc
./factorial.ll:  store i64 %6, i64* %acc
./factorial.ll:  store i64 %8, i64* %1
./factorial.ll:  store i64 0, i64* %1
./find_max_recursive.ll:  store i64 %res, i64* %val
./find_max_recursive1.ll:  store i64 %res, i64* %val
./find_max_recursive2.ll:  store i64 %res, i64* %val
./find_max_recursive3.ll:  store i64 %res, i64* %val
./gcd_euclidian.ll:  store i64 8, i64* %1
./gcd_euclidian.ll:  store i64 10, i64* %2
./gcd_euclidian.ll:  store i64 %9, i64* %1
./gcd_euclidian.ll:  store i64 %10, i64* %2
./gep1.ll:  store i64 5, i64* %p1
./gep1.ll:  store i64 6, i64* %p1
./kierajmumick.ll:  store i64 %3, i64* %4
./lfsr.ll:  store i64 1, i64* %ctr
./lfsr.ll:  store i64 %3, i64* %ctr
./linear_search.ll:  store i64 0, i64* %i
./linear_search.ll:  store i64 %a, i64* %i
./matmul.ll:  store i64 0, i64* %i
./matmul.ll:  store i64 0, i64* %j
./matmul.ll:  store i64 %ab, i64* %r
./matmul.ll:  store i64 %jinc, i64* %j
./matmul.ll:  store i64 %iinc, i64* %i
./matmul.ll:  store i64 0, i64* %r
./matmul.ll:  store i64 0, i64* %i
./matmul.ll:  store i64 0, i64* %j
./matmul.ll:  store i64 %tmp, i64* %r
./matmul.ll:  store i64 %jinc, i64* %j
./matmul.ll:  store i64 %iinc, i64* %i
./max_thomas_test.ll:  store i64 1, i64* %a
./max_thomas_test.ll:  store i64* %a, i64** %b
./max_thomas_test.ll:  store i64** %b, i64*** %c
./max_thomas_test.ll:  store i64*** %c, i64**** %d
./max_thomas_test.ll:  store i64**** %d, i64***** %e
./max_thomas_test.ll:  store i64***** %e, i64****** %f
./max_thomas_test.ll:  store i64****** %f, i64******* %g
./max_thomas_test.ll:  store i64******* %g, i64******** %h
./max_thomas_test.ll:  store i64******** %h, i64********* %i
./naive_factor_nonprime.ll:  store i64 0, i64* %product_sum
./naive_factor_nonprime.ll:  store i64 %plus, i64* %product_sum
./naive_factor_nonprime.ll:  store i64 2, i64* %factor_attempt
./naive_factor_nonprime.ll:  store i64 %plus, i64* %factor_attempt
./naive_factor_prime.ll:  store i64 0, i64* %product_sum
./naive_factor_prime.ll:  store i64 %plus, i64* %product_sum
./naive_factor_prime.ll:  store i64 2, i64* %factor_attempt
./naive_factor_prime.ll:  store i64 %plus, i64* %factor_attempt
./opt_cbr_test1.ll:  store i64 %1, i64* %2
./opt_cbr_test1.ll:  store i64 8, i64* %2
./opt_cbr_test1.ll:  store i64 0, i64* %2
./opt_globals_test1.ll:  store i64 %4, i64* @y
./our_test.ll:  store i64 %2, i64* %1
./ourtest2.ll:  store i64 %4, i64* %1
./ourtest2.ll:  store i64 %5, i64* %1 
./quickselect.ll:  %store_index = alloca i64
./quickselect.ll:  store i64 %left, i64* %store_index
./quickselect.ll:  store i64 %left, i64* %i
./quickselect.ll:  store i64 %i_more_one, i64* %i
./quickselect.ll:  %store_index_val = load i64, i64* %store_index
./quickselect.ll:  call void @swap(i8** %arr, i64 %store_index_val, i64 %cur_i)
./quickselect.ll:  %add1 = add i64 %store_index_val, 1
./quickselect.ll:  store i64 %add1, i64* %store_index
./quickselect.ll:  %store = load i64, i64* %store_index
./quickselect.ll:  call void @swap(i8** %arr, i64 %right, i64 %store)
./quickselect.ll:  %result = call i8* @ll_ltoa(i64 %store)
./quickselect.ll:  ret i64 %store
./quickselect.ll:  store i8* %j_val, i8** %i_loc
./quickselect.ll:  store i8* %i_val, i8** %j_loc
./return42.ll:  store i64 0, i64* %1
./rsa.ll:  store i64 %c, i64* %_b__3
./rsa.ll:  store i64 %d, i64* %_e__1
./rsa.ll:  store i64 1, i64* %_res__5
./rsa.ll:  store i64 0, i64* %_i__7
./rsa.ll:  store i64 %_bop___17, i64* %_res__5
./rsa.ll:  store i64 %_bop___20, i64* %_i__7
./rsa.ll:  store i64 %_pow_res, i64* %_x__25
./rsa.ll:  store i64 %n, i64* %_y__23
./rsa.ll:  store i64 %_val___27, i64* %_res__28
./rsa.ll:  store i64 %_bop___38, i64* %_res__28
./rsaopt.ll:  store i64 %c, i64* %_b__3
./rsaopt.ll:  store i64 1409083253, i64* %_e__1
./rsaopt.ll:  store i64 1, i64* %_res__5
./rsaopt.ll:  store i64 0, i64* %_i__7
./rsaopt.ll:  store i64 %_bop___17, i64* %_res__5
./rsaopt.ll:  store i64 %_bop___20, i64* %_i__7
./rsaopt.ll:  store i64 %_bop___38, i64* %_res__28
./rsaopt.ll:  store i64 %_pow_res, i64* %_x__25
./rsaopt.ll:  store i64 2935956181, i64* %_y__23
./rsaopt.ll:  store i64 %_val___27, i64* %_res__28
./selectionsort.ll:  store i64 %currmin, i64* %minptr
./selectionsort.ll:  store i64 %start, i64* %minidx
./selectionsort.ll:  store i64 %start, i64* %ptrtoi
./selectionsort.ll:  store i64 %val, i64* %minptr
./selectionsort.ll:  store i64 %i, i64* %minidx
./selectionsort.ll:  store i64 %a, i64* %ptrtoi
./selectionsort.ll:  store i64 %newi, i64* %ptrtoi
./selectionsort.ll:  store i64 %min, i64* %fstidx
./selectionsort.ll:  store i64 %swap, i64* %minptr
./selectionsort1.ll:  store i64 %currmin, i64* %minptr
./selectionsort1.ll:  store i64 %start, i64* %minidx
./selectionsort1.ll:  store i64 %start, i64* %ptrtoi
./selectionsort1.ll:  store i64 %val, i64* %minptr
./selectionsort1.ll:  store i64 %i, i64* %minidx
./selectionsort1.ll:  store i64 %a, i64* %ptrtoi
./selectionsort1.ll:  store i64 %newi, i64* %ptrtoi
./selectionsort1.ll:  store i64 %min, i64* %fstidx
./selectionsort1.ll:  store i64 %swap, i64* %minptr
./selectionsort2.ll:  store i64 %currmin, i64* %minptr
./selectionsort2.ll:  store i64 %start, i64* %minidx
./selectionsort2.ll:  store i64 %start, i64* %ptrtoi
./selectionsort2.ll:  store i64 %val, i64* %minptr
./selectionsort2.ll:  store i64 %i, i64* %minidx
./selectionsort2.ll:  store i64 %a, i64* %ptrtoi
./selectionsort2.ll:  store i64 %newi, i64* %ptrtoi
./selectionsort2.ll:  store i64 %min, i64* %fstidx
./selectionsort2.ll:  store i64 %swap, i64* %minptr
./selectionsort3.ll:  store i64 %currmin, i64* %minptr
./selectionsort3.ll:  store i64 %start, i64* %minidx
./selectionsort3.ll:  store i64 %start, i64* %ptrtoi
./selectionsort3.ll:  store i64 %val, i64* %minptr
./selectionsort3.ll:  store i64 %i, i64* %minidx
./selectionsort3.ll:  store i64 %a, i64* %ptrtoi
./selectionsort3.ll:  store i64 %newi, i64* %ptrtoi
./selectionsort3.ll:  store i64 %min, i64* %fstidx
./selectionsort3.ll:  store i64 %swap, i64* %minptr
./selectionsort3.ll:  store i64 %start, i64* %ptrtoi
./selectionsort3.ll:  store i64 %a, i64* %ptrtoi
./selectionsort4.ll:  store i64 %currmin, i64* %minptr
./selectionsort4.ll:  store i64 %start, i64* %minidx
./selectionsort4.ll:  store i64 %start, i64* %ptrtoi
./selectionsort4.ll:  store i64 %val, i64* %minptr
./selectionsort4.ll:  store i64 %i, i64* %minidx
./selectionsort4.ll:  store i64 %a, i64* %ptrtoi
./selectionsort4.ll:  store i64 %newi, i64* %ptrtoi
./selectionsort4.ll:  store i64 %min, i64* %fstidx
./selectionsort4.ll:  store i64 %swap, i64* %minptr
./selectionsort4.ll:  store i64 %start, i64* %ptrtoi
./selectionsort4.ll:  store i64 %a, i64* %ptrtoi
./sieve.ll:  store i64 0, i64* %1
./sieve.ll:  store i64 0, i64* %2
./sieve.ll:  store i64 2, i64* %i
./sieve.ll:  store i64 1, i64* %6
./sieve.ll:  store i64 %7, i64* %i
./sieve.ll:  store i64 2, i64* %i
./sieve.ll:  store i64 %14, i64* %j
./sieve.ll:  store i64 0, i64* %17
./sieve.ll:  store i64 %18, i64* %j
./sieve.ll:  store i64 %20, i64* %i
./sqrt1.ll:  store i64 0, i64* %i
./sqrt1.ll:  store i64 %a, i64* %i
./sqrt2.ll:  store i64 0, i64* %i
./sqrt2.ll:  store i64 %a, i64* %i
./sqrt3.ll:  store i64 0, i64* %i
./sqrt3.ll:  store i64 %a, i64* %i
./sqrt4.ll:  store i64 0, i64* %i
./sqrt4.ll:  store i64 %a, i64* %i
./sqrt5.ll:  store i64 0, i64* %i
./sqrt5.ll:  store i64 %a, i64* %i
