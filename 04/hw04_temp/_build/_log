### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules main.ml > main.ml.depends
# Target: util/assert.mli.depends, tags: { extension:mli, file:util/assert.mli, ocaml, ocamldep, quiet }
ocamldep.opt -modules util/assert.mli > util/assert.mli.depends
# Target: driver.ml.depends, tags: { extension:ml, file:driver.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules driver.ml > driver.ml.depends
# Target: astlib.ml.depends, tags: { extension:ml, file:astlib.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules astlib.ml > astlib.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules ast.ml > ast.ml.depends
# Target: util/range.mli.depends, tags: { extension:mli, file:util/range.mli, ocaml, ocamldep, quiet }
ocamldep.opt -modules util/range.mli > util/range.mli.depends
# Target: util/range.cmi, tags: { byte, compile, extension:mli, file:util/range.mli, interf, ocaml, quiet }
ocamlc.opt -c -I util -I x86 -I ll -o util/range.cmi util/range.mli
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlc.opt -c -I x86 -I ll -I util -o ast.cmo ast.ml
# Target: backend.ml.depends, tags: { extension:ml, file:backend.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules backend.ml > backend.ml.depends
# Target: ll/ll.ml.depends, tags: { extension:ml, file:ll/ll.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules ll/ll.ml > ll/ll.ml.depends
# Target: util/platform.ml.depends, tags: { extension:ml, file:util/platform.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules util/platform.ml > util/platform.ml.depends
# Target: x86/x86.ml.depends, tags: { extension:ml, file:x86/x86.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules x86/x86.ml > x86/x86.ml.depends
# Target: ll/ll.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ll/ll.cmo, file:ll/ll.ml, implem, ocaml, quiet }
ocamlc.opt -c -I ll -I x86 -I util -o ll/ll.cmo ll/ll.ml
# Target: util/platform.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:util/platform.cmo, file:util/platform.ml, implem, ocaml, quiet }
ocamlc.opt -c -I util -I x86 -I ll -o util/platform.cmo util/platform.ml
+ ocamlc.opt -c -I util -I x86 -I ll -o util/platform.cmo util/platform.ml
File "util/platform.ml", line 77, characters 10-27:
77 |     flush Pervasives.stdout )
               ^^^^^^^^^^^^^^^^^
Alert deprecated: module Stdlib.Pervasives
Use Stdlib instead.

If you need to stay compatible with OCaml < 4.07, you can use the 
stdlib-shims library: https://github.com/ocaml/stdlib-shims
# Target: x86/x86.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:x86/x86.cmo, file:x86/x86.ml, implem, ocaml, quiet }
ocamlc.opt -c -I x86 -I ll -I util -o x86/x86.cmo x86/x86.ml
# Target: frontend.ml.depends, tags: { extension:ml, file:frontend.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules frontend.ml > frontend.ml.depends
# Target: ll/llutil.ml.depends, tags: { extension:ml, file:ll/llutil.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules ll/llutil.ml > ll/llutil.ml.depends
# Target: ll/llutil.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ll/llutil.cmo, file:ll/llutil.ml, implem, ocaml, quiet }
ocamlc.opt -c -I ll -I x86 -I util -o ll/llutil.cmo ll/llutil.ml
+ ocamlc.opt -c -I ll -I x86 -I util -o ll/llutil.cmo ll/llutil.ml
File "ll/llutil.ml", line 134, characters 2-20:
134 |   Pervasives.compare
        ^^^^^^^^^^^^^^^^^^
Alert deprecated: module Stdlib.Pervasives
Use Stdlib instead.

If you need to stay compatible with OCaml < 4.07, you can use the 
stdlib-shims library: https://github.com/ocaml/stdlib-shims
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamldep.opt -modules' parser.mly > parser.mly.depends
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlc.opt -I x86 -I ll -I util' --explain --infer parser.mly
+ menhir --ocamlc 'ocamlc.opt -I x86 -I ll -I util' --explain --infer parser.mly
File "parser.mly", line 106, characters 13-18:
Error: This variant expression is expected to have type Ast.ty
       The constructor TVoid does not belong to type Ast.ty
Command exited with code 1.
# Compilation unsuccessful.
